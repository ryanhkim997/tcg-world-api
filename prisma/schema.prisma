generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PokemonCardListStaging {
  id              Int       @id @default(autoincrement())
  cardName        String?   @map("card_name")
  consoleName     String?   @map("console_name")
  loosePrice      Decimal?  @default(0) @map("loose_price") @db.Decimal
  priceChartingId String?   @map("price_charting_id")
  salesVolume     Int?      @default(0) @map("sales_volume")
  tcgId           String?   @map("tcg_id")
  dateTimeUpdated DateTime  @default(now()) @map("date_time_updated") @db.Timestamptz(6)
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("pokemon_card_list_staging")
}

model PriceSources {
  id          Int       @id @default(autoincrement())
  name        String?   @unique
  apiEndpoint String?   @map("api_endpoint")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("price_sources")
}

model PullHistory {
  id         String    @id @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  datePulled DateTime  @map("date_pulled") @db.Timestamp(6)
  cardPrice  Decimal   @map("card_price") @db.Decimal
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  cardPackId String    @map("card_pack_id") @db.Uuid
  cardPack   PackCards @relation(fields: [cardPackId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       Users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("pull_history")
}

model UserCard {
  id                 String    @id @db.Uuid
  currentPrice       Decimal   @map("current_price") @db.Decimal(15, 2)
  obtainedAt         DateTime  @map("obtained_at") @db.Timestamp(6)
  cardId             String    @map("card_id") @db.Uuid
  userId             String    @map("user_id") @db.Uuid
  priceLockEndDate   DateTime  @map("price_lock_end_date") @db.Timestamp(6)
  currentPriceInGems Int       @default(0) @map("current_price_in_gems")
  lockedPriceInGems  Int       @default(0) @map("locked_price_in_gems")
  lockedPrice        Decimal   @map("locked_price") @db.Decimal(15, 2)
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  card               Cards     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user               Users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_card")
}

model UserPolicyAgreement {
  id              String    @id @db.Uuid
  versionAccepted String?   @map("version_accepted")
  acceptedAt      DateTime  @map("accepted_at") @db.Timestamp(6)
  userId          String    @map("user_id") @db.Uuid
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  user            Users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_policy_agreement")
}

model Addresses {
  streetAddress_1 String        @map("street_address_1")
  streetAddress_2 String?       @map("street_address_2")
  city            String
  state           String
  zip             String
  country         String
  id              String        @id(map: "address_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String?       @map("user_id") @db.Uuid
  createdAt       DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?     @default(now()) @map("updated_at") @db.Timestamptz(6)
  users           Users?        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_address_user")
  withdrawals     Withdrawals[]

  @@map("addresses")
}

model Cards {
  id                 String              @id(map: "card_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardName           String              @map("card_name")
  currentPrice       Decimal             @default(0) @map("current_price") @db.Decimal(15, 2)
  currentPriceInGems Int?                @default(0) @map("current_price_in_gems")
  currentVolume      Int?                @default(0) @map("current_volume")
  priceChartingId    String              @unique @map("price_charting_id")
  releaseDate        DateTime?           @default(now()) @map("release_date") @db.Date
  setName            String?             @map("set_name")
  language           String?
  imageUrl           String?             @map("image_url")
  createdAt          DateTime?           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?           @default(now()) @map("updated_at") @db.Timestamptz(6)
  cardsPriceHistory  CardsPriceHistory[]
  packCards          PackCards[]
  userCard           UserCard[]

  @@map("cards")
}

model CardsPriceHistory {
  price     Decimal   @default(0) @db.Decimal(15, 2)
  volume    Int?      @default(0)
  cardId    String    @map("card_id") @db.Uuid
  id        String    @id(map: "card_price_history_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  cards     Cards     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "card_price_history_card_id_fkey")

  @@map("cards_price_history")
}

model Deposits {
  userId                  String              @map("user_id") @db.Uuid
  orderDate               DateTime            @default(now()) @map("order_date") @db.Timestamptz(6)
  gemCount                Int                 @default(0) @map("gem_count")
  dollarCostOfTransaction Int                 @default(0) @map("dollar_cost_of_transaction")
  errorReason             String?             @map("error_reason")
  status                  DepositStatus
  id                      String              @id(map: "deposit_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt               DateTime?           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime?           @default(now()) @map("updated_at") @db.Timestamptz(6)
  users                   Users               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "deposit_user_id_fkey")

  @@map("deposits")
}

model EmailNotifications {
  id         Int       @id(map: "email_notification_pkey") @default(autoincrement())
  promotions Boolean   @default(false)
  newDrops   Boolean   @default(false) @map("new_drops")
  memes      Boolean   @default(false)
  userId     String    @map("user_id") @db.Uuid
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  users      Users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "email_notification_user_id_fkey")

  @@map("email_notifications")
}

model PackCards {
  weight        Decimal           @default(0) @db.Decimal(15, 2)
  cardId        String            @map("card_id") @db.Uuid
  packId        String            @map("pack_id") @db.Uuid
  id            String            @id(map: "card_pack_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6)
  isFeatured    Boolean           @default(false) @map("is_featured")
  featuredOrder Int?              @map("featured_order")
  tier          TierEnum?         @default(TIER_1)
  cards         Cards             @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "card_pack_card_id_fkey")
  packs         Packs             @relation(fields: [packId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "card_pack_pack_id_fkey")
  pullHistory   PullHistory[]

  @@map("pack_cards")
}

model Packs {
  id                String              @id(map: "pack_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  theme             String?
  expectedValue     Decimal             @default(0) @map("expected_value") @db.Decimal(15, 2)
  houseMargin       Decimal             @default(0) @map("house_margin") @db.Decimal(15, 2)
  price             Decimal?            @db.Decimal(15, 2)
  gemPrice          Int?                @map("gem_price")
  language          String?
  createdAt         DateTime?           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?           @default(now()) @map("updated_at") @db.Timestamptz(6)
  packCards         PackCards[]
  packsPriceHistory PacksPriceHistory[]

  @@map("packs")
}

model PacksPriceHistory {
  id        String    @id(map: "pack_price_history_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  packEv    Decimal   @default(0) @map("pack_ev") @db.Decimal(15, 2)
  packId    String    @map("pack_id") @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  packs     Packs     @relation(fields: [packId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pack_price_history_pack_id_fkey")

  @@map("packs_price_history")
}

model Tickets {
  id          String                 @id(map: "ticket_pkey") @db.Uuid
  subject     String?
  description String?
  category    CategoryEnum_05e41e19?
  userId      String                 @map("user_id") @db.Uuid
  createdAt   DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?              @default(now()) @map("updated_at") @db.Timestamptz(6)
  users       Users                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ticket_user_id_fkey")

  @@map("tickets")
}

model Users {
  firstName           String?                @map("first_name")
  lastName            String?                @map("last_name")
  email               String                 @unique
  phoneNumber         String?                @map("phone_number")
  password            String
  username            String
  gemCount            Int                    @default(0) @map("gem_count")
  nonce               Int?                   @default(0)
  clientSeed          String?                @map("client_seed")
  salt                String?
  status              UserStatus
  language            String?
  timezone            Timezone?
  id                  String                 @id(map: "user_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt           DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?              @default(now()) @map("updated_at") @db.Timestamptz(6)
  addresses           Addresses[]
  deposits            Deposits[]
  emailNotifications  EmailNotifications[]
  pullHistory         PullHistory[]
  tickets             Tickets[]
  userCard            UserCard[]
  userPolicyAgreement UserPolicyAgreement[]
  withdrawals         Withdrawals[]

  @@map("users")
}

model Withdrawals {
  id               String                         @id(map: "withdrawal_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String?                        @map("user_id") @db.Uuid
  shippingAddress  String                         @map("shipping_address") @db.Uuid
  phoneNumber      String?                        @map("phone_number")
  shippingCost     Decimal?                       @default(0) @map("shipping_cost") @db.Decimal(15, 2)
  gemCount         Int                            @default(0) @map("gem_count")
  orderDate        DateTime                       @default(now()) @map("order_date") @db.Timestamptz(6)
  lastUpdatedDate  DateTime?                      @default(now()) @map("last_updated_date") @db.Timestamptz(6)
  trackingNumber   String?                        @map("tracking_number")
  errorReason      String?                        @map("error_reason")
  paymentProvider  PaymentProvider   @map("payment_provider")
  status           WithdrawalStatus
  shippingProvider ShippingProviderEnum? @map("shipping_provider")
  createdAt        DateTime?                      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?                      @default(now()) @map("updated_at") @db.Timestamptz(6)
  users            Users?                         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_withdrawal_user")
  addresses        Addresses                      @relation(fields: [shippingAddress], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "withdrawal_shipping_address_fkey")

  @@map("withdrawals")
}

enum CategoryEnum_05e41e19 {
  Complaint1
  Complaint2

  @@map("category_enum_05e41e19")
}

enum ShippingProviderEnum {
  USPS
  UPS
  FEDEX
  DHL

  @@map("shipping_provider_enum_7947d55e")
}

enum WithdrawalStatus {
  PROCESSING
  COMPLETED
  FAILED

  @@map("status_enum_676ca451")
}

enum DepositStatus {
  PROCESSING
  COMPLETED
  FAILED

  @@map("status_enum_77ad13bd")
}

enum UserStatus {
  ACTIVE
  DELETED
  BLACKLISTED

  @@map("status_enum_b633788f")
}

enum TierEnum {
  TIER_1
  TIER_2
  TIER_3
  TIER_4
  TIER_5

  @@map("tier_enum_a49971a4")
}

enum Timezone {
  PST

  @@map("timezone_enum_1137e051")
}

enum PaymentProvider {
  CARD

  @@map("payment_provider_enum_1022488b")
}
